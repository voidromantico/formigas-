globals [
  obstacle-percentage ; porcentagem de obstáculos no mundo
  min-ants            ; número mínimo de formigas para regeneração
]

patches-own [
  chemical                 ; quantidade de feromônio neste patch      
  food                     ; quantidade de comida neste patch (0, 1 ou 2)                
  nest?                    ; verdadeiro se o patch é parte do ninho, falso caso contrário               
  nest-scent               ; valor numérico maior próximo ao ninho, usado para orientar as formigas      
  food-source-number       ; identifica as fontes de alimento (1, 2 ou 3)   
  obstacle?                ; indica se o patch é um obstáculo
            
]

turtles-own [
  lifetime                 ; tempo de vida da turtle em ticks            
]

; === PROCEDIMENTOS DE CONFIGURAÇÃO ===

to setup
  clear-all                             
  set obstacle-percentage 20
  set min-ants 80          ; Define o número mínimo de formigas
  
  create-turtles 1 [       ; Cria uma única rainha
    set size 5 
    set color green        ; A rainha é verde
    setxy 0 0              ; Posiciona a rainha no centro do ninho
    set shape "bug"
    set lifetime 99999     ; a rainha possuiu um tempo de vida praticamente infinito
  ]

  create-turtles population [           ; cria formigas com base no valor do slider 'population'
    set size 2                          ; aumenta o tamanho para melhor visualização
    set color red                       ; vermelho indica que não está carregando comida
    set shape "bug"
    set lifetime random 500 + 200       ; As formigas viverão por 200 a 700 ticks
  ]

  create-turtles 5 [                    ; cria 5 predadores
    set size 5
    set color brown                     ; predadores são marrons 
    set shape "fish"
    setxy random-xcor random-ycor       ; coloca os predadores em posições aleatórias
    set lifetime 99999                  ; os predadores teram tempo de vida praticamente infinito
  ]

  setup-patches                         ; chama o procedimento para configurar os patches                         
  reset-ticks                           ; reinicia o contador de tempo da simulação                           
end

to setup-patches
  ask patches [
    setup-nest                          ; configura o ninho nos patches
    setup-food                          ; configura as fontes de alimento
    setup-obstacles                     ; configura obstáculos
    recolor-patch                       ; define as cores dos patches para visualização
  ]
end

to setup-nest
  set nest? (distancexy 0 0) < 5         ; define patches dentro de um raio de 5 unidades como ninho
  set nest-scent 200 - distancexy 0 0    ; valor maior próximo ao ninho, decrescendo com a distância
end

to setup-food                            ;procedimento dos patches
                                         ; Configura as fontes de alimento em posições específicas
  if (distancexy (0.6 * max-pxcor) 0) < 5 [
    set food-source-number 1
  ]
  if (distancexy (-0.6 * max-pxcor) (-0.6 * max-pycor)) < 5 [
    set food-source-number 2
  ]
  if (distancexy (-0.8 * max-pxcor) (0.8 * max-pycor)) < 5 [
    set food-source-number 3
  ]
  if (distancexy (0.7 * max-pxcor) (0.8 * max-pycor)) < 5 [
    set food-source-number 4
  ]
  if (distancexy (-0.6 * max-pxcor) (0.1 * max-pycor)) < 5 [
    set food-source-number 5
  ]
  ; Se o patch faz parte de uma fonte de alimento, atribui uma quantidade de comida (1 ou 2)
  if food-source-number > 0 [
    set food one-of [1 2]  ; Define uma quantidade aleatória de comida
  ]
end

to setup-obstacles
  ; Define obstáculos aleatoriamente com base em um percentual
  if not nest? and food-source-number = 0 [ ;Verifica se o bloco não é parte do ninho ou uma fonte de alimento 
                                                
    if random-float 500 < obstacle-percentage [
      set obstacle? true
    ]
  ]
end

to recolor-patch  ; procedimento dos patches
  ifelse nest? [
    set pcolor violet                    ; patches do ninho em violeta
  ] [
    ifelse obstacle? [
      set pcolor yellow                   ; obstáculos são amarelos
    ] [
      ifelse food > 0 [
        ; patches com comida são coloridos de acordo com a fonte
        if food-source-number = 1 [ set pcolor cyan ]
        if food-source-number = 2 [ set pcolor red ]
        if food-source-number = 3 [ set pcolor blue ]
        if food-source-number = 4 [ set pcolor pink ]
        if food-source-number = 5 [ set pcolor orange]
      ] [
        ; patches normais variam de cor com base na quantidade de feromônio
        set pcolor scale-color green chemical 0.1 5
      ]
    ]
  ]
end

; === PROCEDIMENTOS PRINCIPAIS ===

to go
  ask turtles [
    set lifetime lifetime - 1
    if lifetime <= 0 [ die ]

    if color = brown [
      predatory-behavior               ; comportamento dos predadores
    ] 
    if color = green [                 ; Condição para a rainha (turtle verde)
      stop                             ; A rainha não faz nada, ela para aqui
    ]
    ifelse color = red [
      look-for-food                  ; procura por comida se não estiver carregando
    ] [
      return-to-nest                 ; retorna ao ninho se estiver carregando comida
    ]
    wiggle                           ; movimento aleatório para simular procura
    fd 1                             ; move-se para frente
  ]
  diffuse chemical (diffusion-rate / 100)  ; difusão do feromônio entre os patches
  ask patches [
    set chemical chemical * (100 - evaporation-rate) / 100  ; evaporação do feromônio
    recolor-patch                     ; atualiza a cor do patch após mudanças
  ]
  regenerate-ants  ; Verifica se precisa criar mais formigas
  tick
end

to regenerate-ants
  let current-ants count turtles with [color = red or color = blue] ; conta as formigas vivas
  if current-ants < min-ants [
    let new-ants min-ants - current-ants  ; calcula o número de formigas a serem criadas
    create-turtles new-ants [
      set size 2
      set color red
      set shape "bug"
      setxy random-xcor random-ycor
      set lifetime random 300 + 100     ; define o tempo de vida das novas formigas
    ]
  ]
end

to return-to-nest
  ifelse nest? [
    set color red                       ; muda a cor indicando que a formiga não está mais carregando comida
    rt 180                              ; vira 180 graus para sair do ninho
  ] [
    set chemical chemical + 60          ; deposita feromônio para reforçar a trilha de volta
    uphill-nest-scent                   ; segue o gradiente de 'nest-scent' em direção ao ninho
  ]
end

to look-for-food
  if food > 0 [
    set color blue + 1                ; muda a cor para indicar que está carregando comida
    set food food - 1                 ; reduz a quantidade de comida no patch
    rt 180                            ; vira 180 graus para retornar ao ninho
    stop                              ; finaliza o procedimento atual
  ]
  if chemical > 0.05 [
    uphill-chemical                   ; segue o rastro de feromônio, se houver
  ]
end

; === MOVIMENTAÇÃO E ORIENTAÇÃO ===

to uphill-chemical
  let scent-ahead chemical-scent-at-angle 0    
  let scent-right chemical-scent-at-angle 45   
  let scent-left chemical-scent-at-angle -45   
  
  ifelse (scent-right > scent-ahead) or (scent-left > scent-ahead) [
    ifelse scent-right > scent-left [
      rt 45                                    ; vira 45 graus à direita
    ] [
      lt 45                                    ; vira 45 graus à esquerda
    ]
  ] [
    fd 1                                       ; segue em linha reta caso não haja diferença de cheiro
  ]
end

to uphill-nest-scent
  let scent-ahead nest-scent-at-angle 0        ; chama a função com o ângulo 0
  let scent-right nest-scent-at-angle 45       ; chama a função com o ângulo 45
  let scent-left nest-scent-at-angle -45       ; chama a função com o ângulo -45
  
  ifelse (scent-right > scent-ahead) or (scent-left > scent-ahead) [
    ifelse scent-right > scent-left [
      rt 45                                    ; vira 45 graus à direita
    ] [
      lt 45                                    ; vira 45 graus à esquerda
    ]
  ] [
    fd 1                                       ; segue em linha reta caso não haja diferença de cheiro
  ]
end

to wiggle ; procedimento das formigas
  rt random 40                                 ; vira um ângulo aleatório à direita
  lt random 40                                 ; vira um ângulo aleatório à esquerda
  if not can-move? 1 [ rt 180 ]                ; se não puder se mover, vira 180 graus
end

; === FUNÇÕES AUXILIARES ===


to-report nest-scent-at-angle [angle]
  let p patch-right-and-ahead angle 1  ; Obtém o patch à frente em determinado ângulo
  if p = nobody [ report 0 ]           ; Se não houver patch, retorna 0
  report [nest-scent] of p             ; Retorna o valor de 'nest-scent' do patch
end

to-report chemical-scent-at-angle [angle]
  let p patch-right-and-ahead angle 1
  if p = nobody [ report 0 ]             ; se não houver patch, retorna 0
  report [chemical] of p                 ; retorna o valor de 'chemical' do patch
end

; === COMPORTAMENTO DOS PREDADORES ===


to predatory-behavior
  let prey one-of turtles with [color = red or color = blue]
  
  if prey != nobody [  ; Se uma presa for encontrada
    face prey                          ; Orienta-se em direção à presa
    fd 1                               ; Move-se na direção da presa
    if distance prey < 1 [             ; Se a distância da presa for menor que 1
      ask prey [ die ]                 ; Remove a formiga capturada
    ]
  ]
  ifelse prey = nobody [               ; Se não encontrar presa
    wiggle                             ; Movimento aleatório
    fd 1                               ; Move-se para frente
  ] [
    stop                               ; Se encontrar uma presa, para o movimento
  ]
end
